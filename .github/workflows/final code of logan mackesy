from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import tkinter.font
import os

# Function to clear all input fields
def clear():
    name.delete(0, END)
    number.delete(0, END)
    email.delete(0, END)
    Item.current(0)
    hired.set(1)
    price.delete(0, END)

# Function to save data to a text file
def save_to_file(data):
    with open("customer_data.txt", "a") as file:
        file.write(",".join(data) + "\n")

# Function to load data from a text file
def load_from_file():
    if os.path.exists("customer_data.txt"):
        with open("customer_data.txt", "r") as file:
            for line in file:
                data = line.strip().split(",")
                if len(tree.get_children()) % 2 == 0:
                    tree.insert("", "end", values=data, tags="evenrow")
                else:
                    tree.insert("", "end", values=data, tags="oddrow")

# Function to submit data
def submit():
    if len(name.get()) == 0:
        messagebox.showerror('Name Error', 'Error: Please enter customer full name')
        return
    if not all(x in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz " for x in name.get()):
        messagebox.showerror('Name Error', 'Error: Please enter a valid customer full name')
        return

    if len(number.get()) == 0:
        messagebox.showerror('Receipt Number Error', 'Error: Please enter receipt number')
        return
    if not number.get().isdigit() or len(number.get()) > 6:
        messagebox.showerror('Receipt Number Error', 'Error: Please enter a valid receipt number - Only up to 6 digits')
        return

    price_value = price.get()
    try:
        float(price_value)
    except ValueError:
        messagebox.showerror('Price Error', 'Error: Please enter a valid price')
        return

    email_address = email.get()
    if len(email_address) == 0:
        messagebox.showerror('Email Error', 'Error: Please enter email address')
        return
    if "@" not in email_address or "." not in email_address.split("@")[-1]:
        messagebox.showerror('Email Error', 'Error: Please enter a valid email address')
        return

    list1 = [name.get(), number.get(), Item.get(), str(hired.get()), email_address, price_value]
    save_to_file(list1)
    clear()
    root.geometry("1500x550")

    if len(tree.get_children()) % 2 == 0:
        tree.insert("", "end", values=list1, tags="evenrow")
    else:
        tree.insert("", "end", values=list1, tags="oddrow")

# Function to select an entry from the table
def select():
    search_name = search_entry.get()
    if len(search_name) == 0:
        messagebox.showerror('Search Error', 'Error: Please search for a full name')
        return
    if not all(x in "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz " for x in search_name):
        messagebox.showerror('Search Error', 'Error: Please search for a valid full name')
        search_entry.delete(0, END)
        return

    found = False
    for item in tree.get_children():
        if tree.item(item)["values"][0].lower() == search_name.lower():
            tree.focus(item)
            tree.selection_set(item)
            found = True
            break

    if not found:
        messagebox.showerror('Search Error', 'Error: The name you searched for does not exist')
    search_entry.delete(0, END)

# Function to delete the selected entry from the table
def delete():
    if not tree.selection():
        messagebox.showerror('Delete Error', 'Error: No item selected')
        return

    def yes():
        selected_item = tree.selection()[0]
        tree.delete(selected_item)
        root2.destroy()

    def no():
        root2.destroy()

    root2 = Toplevel()
    root2.geometry("150x50")
    root2.title("Confirm")
    Label(root2, text="Are you sure?").pack()
    frame = Frame(root2)
    frame.pack()
    Button(frame, text="YES", bg="tomato2", command=yes).grid(row=0, column=0, padx=5)
    Button(frame, text="NO", bg="light green", command=no).grid(row=0, column=1, padx=5)

# Function to close the program
def close_program():
    root.destroy()

# Main window setup
root = Tk()
Desired_font = tkinter.font.Font(family="Times New Roman", size=20, weight="bold")
Desired_font2 = tkinter.font.Font(family="Times New Roman", size=10)
root.geometry("1500x550")
root.title("Logan's Party Customer Database Hire")

# Create and place widgets
Label(root, text="Logan's Party Hire Customer Database", font=Desired_font).grid(row=0, column=0, sticky="N")
Label(root, text="").grid(column=1, columnspan=2, row=0)

frame1 = LabelFrame(root, width=480, height=450, bd=2, padx=10, pady=10)
frame1.grid(row=1, column=0, padx=10, rowspan=2)

frame2 = Frame(root)
frame2.grid(column=1, row=1, sticky="N")

# Collect customer full name
Label(frame1, text="Customer full name:", font=Desired_font2).grid(row=0, column=0)
name = Entry(frame1)
name.grid(row=0, column=1)

# Collect receipt number
Label(frame1, text="Receipt Number:", font=Desired_font2).grid(row=2, column=0)
number = Entry(frame1)
number.grid(row=2, column=1)

# Collect item hired
Label(frame1, text="Item Hired:", font=Desired_font2).grid(row=4, column=0)
items_list = ["Party hats", "Happy Birthday sign", "Banners", "Plates", "Cups", "Table cloths", "Party poppers",
              "Cake toppers", "Decorations", "Lighting", "Sound equipment", "Chairs", "Tables", "Wall draping"]
Item = ttk.Combobox(frame1, values=items_list)
Item.current(0)
Item.grid(row=4, column=1)

# Collect number of items hired
Label(frame1, text="Number of Items:", font=Desired_font2).grid(row=6, column=0)
hired = Scale(frame1, from_=1, to=500, orient='horizontal', sliderlength=10)
hired.grid(row=6, column=1)

# Collect email address
Label(frame1, text="Email Address:", font=Desired_font2).grid(row=8, column=0)
email = Entry(frame1)
email.grid(row=8, column=1)

# Collect price of items
Label(frame1, text="Price of items:", font=Desired_font2).grid(row=10, column=0)
price = Entry(frame1)
price.grid(row=10, column=1)

# Add submit and clear buttons
Button(frame1, text="Submit", font=Desired_font2, bg="light green", command=submit).grid(row=12, column=0)
Button(frame1, text="Clear", font=Desired_font2, command=clear).grid(row=12, column=1)

# Create and configure tree
columns = ("Customer full name", "Receipt number", "Item Hired", "Number of items", "Email Address", "Price of Items")
tree = ttk.Treeview(frame2, columns=columns, show="headings")
for col in columns:
    tree.heading(col, text=col)
    tree.column(col, width=150)
tree.grid(row=0, column=0, columnspan=6)

# Configure row colors
tree.tag_configure("oddrow", background="White")
tree.tag_configure("evenrow", background="LightCyan2")

# Load data from file when the application starts
load_from_file()

# Create search functionality
Label(frame2, text="").grid(row=1)
search_entry = Entry(frame2, width=40)
search_entry.grid(row=2, column=0, sticky="W")
Button(frame2, text="Search full name", command=select, font=Desired_font2).grid(row=2, column=0, sticky="E", padx=5)

# Add item return button
Button(frame2, text="Item Returned", font=Desired_font2, bg="aquamarine1", command=delete).grid(row=2, column=1, sticky="W", padx=5)

# Add close button
Button(root, text="Close Database", font=Desired_font2, bg="red", fg="white", command=close_program).grid(row=2, column=0, padx=100, pady=10)

root.mainloop()
